#!/bin/bash

# When called from the shell directly
if [[ -z "$DIR_NAME" ]]; then
    CALLED=1
    DIR_NAME=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
    source "${DIR_NAME}/common.sh"
fi

# This option is used for CI only purposes and
# is disabled by default
DO_NOT_MASK=${DO_NOT_MASK:-0}

# Resource list
crs=()

# Explictly adding rabbit in the grep because its CRD is named with a different domain.
# Also adding monitoring.rhobs, because telemetry uses observability-operator
# to deploy a `MonitoringStack` for storing and scraping metrics.
# Adding grafana.com, observability.openshift.io and logging.openshift.io because of resources used by telemetry logging.
for i in $(/usr/bin/oc get crd | grep -E "(openstack|rabbitmq|monitoring|grafana|observability\.openshift|logging\.openshift)\.(org|com|rhobs|io)" | awk '{print $1}')
do
  crs+=("$i")
done

# explicitly adding Metal3 BareMetalHosts
crs+=("baremetalhosts.metal3.io")

# we use nested loops to nicely output objects partitioned per namespace, kind
echo "Gathering CRs"
for res in "${crs[@]}"; do
  /usr/bin/oc get "${res}" --all-namespaces -o custom-columns=NAME:.metadata.name,NAMESPACE:.metadata.namespace --no-headers 2> /dev/null | \
  while read -r ocresource; do
    ocobject=$(echo "$ocresource" | awk '{print $1}')
    ocproject=$(echo "$ocresource" | awk '{print $2}')
    if [ -n "${ocproject}" ] && [ "${ocproject}" != "<none>" ]; then
      object_collection_path=${BASE_COLLECTION_PATH}/namespaces/${ocproject}/crs/${res}
      mkdir -p "${object_collection_path}"
      run_bg /usr/bin/oc get "${res}" -n "${ocproject}" -o yaml "${ocobject}" '>' "${object_collection_path}/${ocobject}.yaml"
    fi
  done
done

[[ $CALLED -eq 1 ]] && wait_bg

if [[ "${DO_NOT_MASK}" -eq 0 ]]; then
    # All CRs have been collected, apply masking on the CRs directory tree
    /usr/bin/mask.py --dir "${BASE_COLLECTION_PATH}/namespaces"
fi
